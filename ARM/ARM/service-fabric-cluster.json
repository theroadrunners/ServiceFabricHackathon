{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": { "commonSettings": { "type": "object" } },
    "variables": {
        "nlbname": "[concat('loadbalancer-servicefabric-', parameters('commonSettings').tenantName)]",
        "nlbid": "[resourceId('Microsoft.Network/loadBalancers', variables('nlbname'))]",
        "storage": {
            "nameSuffix": "[concat(toLower(replace(parameters('commonSettings').tenantName,'-','')), 'vmss')]",
            "prefixes": [ "a", "g", "m", "s", "y" ]
        }
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[parameters('commonSettings').constants.apiVersions.networkSecurityGroups]",
            "location": "[resourceGroup().location]",
            "name": "[parameters('commonSettings').vnet.subnet.servicefabric.nsgName]",
            "tags": { "displayName": "NetworkSecurityGroup servicefabric" },
            "properties": {
                "securityRules": [
                    {
                        "name": "servicefabric-http-in",
                        "properties": {
                            "priority": 100,
                            "description": "Allow TCP/80 Inbound",
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "Internet",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "[parameters('commonSettings').vnet.subnet.servicefabric.address]",
                            "destinationPortRange": "80"
                        }
                    },
                    {
                        "name": "servicefabric-https-in",
                        "properties": {
                            "priority": 101,
                            "description": "Allow TCP/443 Inbound",
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "Internet",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "[parameters('commonSettings').vnet.subnet.servicefabric.address]",
                            "destinationPortRange": "443"
                        }
                    },
                    {
                        "name": "fabricTcpGatewayPort-in",
                        "properties": {
                            "priority": 102,
                            "description": "Allow TCP/19000 Inbound",
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "Internet",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "[parameters('commonSettings').vnet.subnet.servicefabric.address]",
                            "destinationPortRange": "19000"
                        }
                    },
                    {
                        "name": "fabricHttpGatewayPort-in",
                        "properties": {
                            "priority": 103,
                            "description": "Allow TCP/19080 Inbound",
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "Internet",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "[parameters('commonSettings').vnet.subnet.servicefabric.address]",
                            "destinationPortRange": "19080"
                        }
                    },
                    {
                        "name": "block-everything",
                        "properties": {
                            "priority": 4096,
                            "description": "Block all inbound traffic",
                            "access": "Deny",
                            "direction": "Inbound",
                            "protocol": "*",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "[parameters('commonSettings').vnet.subnet.servicefabric.address]",
                            "destinationPortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "[parameters('commonSettings').constants.apiVersions.virtualNetworks]",
            "location": "[resourceGroup().location]",
            "name": "[parameters('commonSettings').vnet.name]",
            "tags": { "displayName": "Virtual Network" },
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', parameters('commonSettings').vnet.subnet.servicefabric.nsgName)]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('commonSettings').vnet.address]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('commonSettings').vnet.subnet.servicefabric.name]",
                        "properties": {
                            "addressPrefix": "[parameters('commonSettings').vnet.subnet.servicefabric.address]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('commonSettings').vnet.subnet.servicefabric.nsgName)]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "[parameters('commonSettings').constants.apiVersions.publicIPAddresses]",
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('commonSettings').tenantName, '-servicefabric')]",
            "tags": {
                "displayName": "Public IP Service Fabric",
                "tenantName": "[parameters('commonSettings').tenantName]"
            },
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(parameters('commonSettings').tenantName, 'servicefabric')]"
                },
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 30
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('nlbname')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[parameters('commonSettings').constants.apiVersions.loadBalancers]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', concat(parameters('commonSettings').tenantName, '-servicefabric'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "myLoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('commonSettings').tenantName, '-servicefabric'))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[concat('servicefabric', '-', 'backendAddressPool')]"
                    }
                ],
                "probes": [
                    {
                        "name": "probe-http",
                        "properties": {
                            "protocol": "Http",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "requestPath": "/"
                        }
                    },
                    {
                        "name": "probe-https",
                        "properties": {
                            "protocol": "Http",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "requestPath": "/"
                        }
                    },
                    {
                        "name": "probe-19000",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 19000,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "probe-19080",
                        "properties": {
                            "protocol": "Http",
                            "port": 19080,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "requestPath": "/"
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "nlb-rule-http",
                        "properties": {
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": { "id": "[concat(variables('nlbid'), '/probes/', 'probe-http')]" },
                            "frontendIPConfiguration": { "id": "[concat(variables('nlbid'), '/frontendIPConfigurations/', 'myLoadBalancerFrontEnd')]" },
                            "backendAddressPool": { "id": "[concat(variables('nlbid'), '/backendAddressPools/', concat('servicefabric', '-', 'backendAddressPool'))]" }
                        }
                    },
                    {
                        "name": "nlb-rule-https",
                        "properties": {
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": { "id": "[concat(variables('nlbid'), '/probes/', 'probe-http')]" },
                            "frontendIPConfiguration": { "id": "[concat(variables('nlbid'), '/frontendIPConfigurations/', 'myLoadBalancerFrontEnd')]" },
                            "backendAddressPool": { "id": "[concat(variables('nlbid'), '/backendAddressPools/', concat('servicefabric', '-', 'backendAddressPool'))]" }
                        }
                    },
                    {
                        "name": "nlb-rule-19000",
                        "properties": {
                            "protocol": "Tcp",
                            "frontendPort": 19000,
                            "backendPort": 19000,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": { "id": "[concat(variables('nlbid'), '/probes/', 'probe-19000')]" },
                            "frontendIPConfiguration": { "id": "[concat(variables('nlbid'), '/frontendIPConfigurations/', 'myLoadBalancerFrontEnd')]" },
                            "backendAddressPool": { "id": "[concat(variables('nlbid'), '/backendAddressPools/', concat('servicefabric', '-', 'backendAddressPool'))]" }
                        }
                    },
                    {
                        "name": "nlb-rule-19080",
                        "properties": {
                            "protocol": "Tcp",
                            "frontendPort": 19080,
                            "backendPort": 19080,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": { "id": "[concat(variables('nlbid'), '/probes/', 'probe-19080')]" },
                            "frontendIPConfiguration": { "id": "[concat(variables('nlbid'), '/frontendIPConfigurations/', 'myLoadBalancerFrontEnd')]" },
                            "backendAddressPool": { "id": "[concat(variables('nlbid'), '/backendAddressPools/', concat('servicefabric', '-', 'backendAddressPool'))]" }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "[parameters('commonSettings').constants.apiVersions.storageAccounts]",
            "location": "[resourceGroup().location]",
            "name": "[concat(variables('storage').prefixes[copyIndex()], variables('storage').nameSuffix)]",
            "tags": { "displayName": "Storage Accounts - VM ScaleSet - ServiceFabric" },
            "copy": {
                "name": "vmssstorageLoop",
                "count": "[length(variables('storage').prefixes)]"
            },
            "properties": { "accountType": "Standard_LRS" }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "[parameters('commonSettings').constants.apiVersions.storageAccounts]",
            "name": "[parameters('commonSettings').serviceFabric.loggingStorageName]",
            "location": "[resourceGroup().location]",
            "properties": { "accountType": "Standard_LRS" }
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "apiVersion": "[parameters('commonSettings').constants.apiVersions.virtualMachineScaleSets]",
            "location": "[resourceGroup().location]",
            "name": "[concat('vmss-', parameters('commonSettings').tenantName, '-', 'servicefabric')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').prefixes[0], variables('storage').nameSuffix)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').prefixes[1], variables('storage').nameSuffix)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').prefixes[2], variables('storage').nameSuffix)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').prefixes[3], variables('storage').nameSuffix)]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storage').prefixes[4], variables('storage').nameSuffix)]",
                "[concat('Microsoft.Network/loadBalancers/', variables('nlbname'))]"
            ],
            "sku": {
                "name": "[parameters('commonSettings').vm.size.servicefabric]",
                "tier": "Standard",
                "capacity": "[parameters('commonSettings').serviceFabric.clusterSize]"
            },
            "tags": { "displayName": "Virtual Machine ScaleSet" },
            "properties": {
                "upgradePolicy": {
                    "mode": "Automatic"
                },
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "name": "VMSSOsDisk",
                            "caching": "ReadWrite",
                            "createOption": "FromImage",
                            "vhdContainers": [
                                "[concat('https://', variables('storage').prefixes[0], variables('storage').nameSuffix, '.', parameters('commonSettings').environment.blobEndpoint, '/vmss')]",
                                "[concat('https://', variables('storage').prefixes[1], variables('storage').nameSuffix, '.', parameters('commonSettings').environment.blobEndpoint, '/vmss')]",
                                "[concat('https://', variables('storage').prefixes[2], variables('storage').nameSuffix, '.', parameters('commonSettings').environment.blobEndpoint, '/vmss')]",
                                "[concat('https://', variables('storage').prefixes[3], variables('storage').nameSuffix, '.', parameters('commonSettings').environment.blobEndpoint, '/vmss')]",
                                "[concat('https://', variables('storage').prefixes[4], variables('storage').nameSuffix, '.', parameters('commonSettings').environment.blobEndpoint, '/vmss')]"
                            ]
                        },
                        "imageReference": {
                            "publisher": "[parameters('commonSettings').vm.images.servicefabric.publisher]",
                            "offer": "[parameters('commonSettings').vm.images.servicefabric.offer]",
                            "sku": "[parameters('commonSettings').vm.images.servicefabric.sku]",
                            "version": "[parameters('commonSettings').vm.images.servicefabric.version]"
                        }
                    },
                    "osProfile": {
                        "computerNamePrefix": "servicefabric",
                        "adminUsername": "[parameters('commonSettings').adminUsername]",
                        "adminPassword": "[parameters('commonSettings').adminPassword]",
                        "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": true
                        }
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "vmssnic",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "myVirtualMachineScaleSetIpConfiguration",
                                            "properties": {
                                                "subnet": { "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('commonSettings').vnet.name), '/subnets/', parameters('commonSettings').vnet.subnet.servicefabric.name)]" },
                                                "loadBalancerBackendAddressPools": [ { "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('nlbname')), '/backendAddressPools/', concat('servicefabric', '-', 'backendAddressPool'))]" } ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "servicefabric-extension",
                                "properties": {
                                    "type": "ServiceFabricNode",
                                    "autoUpgradeMinorVersion": false,
                                    "protectedSettings": {
                                        "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('commonSettings').serviceFabric.loggingStorageName), parameters('commonSettings').constants.apiVersions.storageAccounts).key1]",
                                        "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('commonSettings').serviceFabric.loggingStorageName), parameters('commonSettings').constants.apiVersions.storageAccounts).key2]"
                                    },
                                    "publisher": "Microsoft.Azure.ServiceFabric",
                                    "settings": {
                                        "clusterEndpoint": "[reference(parameters('commonSettings').serviceFabric.clusterName).clusterEndpoint]",
                                        "nodeTypeRef": "[concat('vmss-', parameters('commonSettings').tenantName, '-', 'servicefabric')]",
                                        "dataPath": "D:\\\\SvcFab",
                                        "durabilityLevel": "[parameters('commonSettings').serviceFabric.durabilityLevel]",
                                        "certificate": {
                                            "thumbprint": "[parameters('commonSettings').serviceFabric.vault.cert.thumbprint]",
                                            "x509StoreName": "[parameters('commonSettings').serviceFabric.vault.cert.x509StoreName]"
                                        }
                                    },
                                    "typeHandlerVersion": "1.0"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "apiVersion": "2016-03-01",
            "type": "Microsoft.ServiceFabric/clusters",
            "name": "[parameters('commonSettings').serviceFabric.clusterName]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('commonSettings').serviceFabric.loggingStorageName)]"
            ],
            "properties": {
                "certificate": {
                    "thumbprint": "[parameters('commonSettings').serviceFabric.vault.cert.thumbprint]",
                    "x509StoreName": "[parameters('commonSettings').serviceFabric.vault.cert.x509StoreName]"
                },
                "clientCertificateCommonNames": [ ],
                "clientCertificateThumbprints": [ ],
                "clusterState": "Default",
                "diagnosticsStorageAccountConfig": {
                    "protectedAccountKeyName": "StorageAccountKey1",
                    "storageAccountName": "[parameters('commonSettings').serviceFabric.loggingStorageName]",
                    "blobEndpoint": "[concat('https://', parameters('commonSettings').serviceFabric.loggingStorageName, parameters('commonSettings').environment.blobEndpoint, '/')]",
                    "queueEndpoint": "[concat('https://', parameters('commonSettings').serviceFabric.loggingStorageName, parameters('commonSettings').environment.queueEndpoint, '/')]",
                    "tableEndpoint": "[concat('https://', parameters('commonSettings').serviceFabric.loggingStorageName, parameters('commonSettings').environment.tableEndpoint, '/')]"
                },
                "fabricSettings": [
                    {
                        "name": "Security",
                        "parameters": [
                            {
                                "name": "ClusterProtectionLevel",
                                "value": "[parameters('commonSettings').serviceFabric.clusterProtectionLevel]"
                            }
                        ]
                    }
                ],
                "managementEndpoint": "[concat('https://', reference(concat(parameters('commonSettings').tenantName, '-servicefabric')).dnsSettings.fqdn,':19080')]",
                "nodeTypes": [
                    {
                        "name": "[concat('vmss-', parameters('commonSettings').tenantName, '-', 'servicefabric')]",
                        "applicationPorts": {
                            "startPort": "1000",
                            "endPort": "80"
                        },
                        "clientConnectionEndpointPort": "19000",
                        "httpGatewayEndpointPort": "19080",
                        "durabilityLevel": "[parameters('commonSettings').serviceFabric.durabilityLevel]",
                        "ephemeralPorts": {
                            "startPort": "2000",
                            "endPort": "3000"
                        },
                        "isPrimary": true,
                        "vmInstanceCount": "[parameters('commonSettings').serviceFabric.clusterSize]"
                    }
                ],
                "provisioningState": "Default",
                "reliabilityLevel": "[parameters('commonSettings').serviceFabric.reliabilityLevel]",
                "vmImage": "Windows"
            }
        }
    ]
}